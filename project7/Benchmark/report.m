function  report(filename)

load(filename,'-mat');
% output some useful info 
fprintf('Initial value:\n');
xkk
size(xkk)
fprintf('NewtonIter: %d\n', newtonIter);
fprintf('Shooting step L: %d\n', L);
fprintf('Backward Euler Step Number: %d\n', stepNum);
fprintf('Runtime: %.8f\n', runtime);
fprintf('Max Absolute Error: %.8f\n',maxError)
fprintf('Mean Square Error: %.8f\n',MSE);
% plot source signal 
subplot(2, 2, 1);
plot(time, source);
title('source signal');
xlabel('T/s');
ylabel('V/V');
% plot backward euler results based on initial value generated by shooting method 
subplot(2, 2, 2);
plot(time, output(:,1));
title(strcat('Shooting',' output'));
xlabel('T/s');
ylabel('V/V');
% compared with spice
subplot(2, 2, 3);
plot(time, output(:,1), 'b--');
hold on;
plot(hspiceTime, hspiceOutput(:,1), 'g--');
hold off;
title(strcat('Shooting',' vs SPICE'));
xlabel('T/s');
ylabel('V/V');
legend('Shooting', 'SPICE');
% abs error
subplot(2, 2, 4);
plot(hspiceTime, absError(:,1), 'ro');
title(strcat('Shooting',' Absolute Error Distribution'));
xlabel('T/s');
ylabel('V/V');

end

